import React, { useState, useEffect, useRef } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { toast } from 'react-toastify';
import styled from 'styled-components';
import MobileBurger from '../components/headers/MobileBurger';
import DesktopHeader from '../components/headers/DesktopHeader';
import 'slick-carousel/slick/slick.css';
import 'slick-carousel/slick/slick-theme.css';
import Slidertop10 from '../components/sliders/SliderTop10';
import SliderNew from '../components/sliders/SliderNew';
import SliderChannel from '../components/sliders/SliderChannels';
import SliderDiaries from '../components/sliders/SliderDaries';
import SliderSpace from '../components/sliders/SliderSpace';
import SlideRecommended from '../components/sliders/SliderRecommend';
import SliderInterview from '../components/sliders/SliderInterview';
import SliderFashion from '../components/sliders/SliderFashion';
import SliderDocumentaries from '../components/sliders/SliderDocumentaries';
import SliderCamera from '../components/sliders/SliderCameras';
import SliderSoon from '../components/sliders/SliderSoon';
import SliderTeens from '../components/sliders/SliderTeens';
import SliderOnly from '../components/sliders/SliderOnly';
import SliderSocial from '../components/sliders/SliderSocial';
import ShareModal from '../components/ShareModal';
import WelcomePopup from '../components/Welcomepop';
import instagram from '/instagram.png';
import channelsimg from '../assets/channels.png';
import logo from '/PLAYMOOD_DEF.png';
import { useNavigate } from 'react-router-dom';
import playbutton from '/play-button2.png';
import plusbutton from '/addbutton.png';
import whiteheart from '/whiteheart.png';
import redheart from '/redheart.png';
import sendmessage from '/sendmessage.png';
import { AiOutlineClose } from 'react-icons/ai';
import LikedContentCard from '../components/LikedContentCard';
import axios from 'axios';
import { likeContent, unlikeContent, addToWatchlist, removeFromWatchlist } from '../features/authSlice';

export default function Home() {
  const [channels, set_channels] = useState(false);
  const navigate = useNavigate();
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);
  const [showCookiesPopup, setShowCookiesPopup] = useState(false);
  const [isLiked, setIsLiked] = useState(false);
  const dispatch = useDispatch();
  const user = useSelector((state) => state.auth.user);
  const [homePageData, setHomePageData] = useState([]);
  const [contentIndex, setContentIndex] = useState(0);
  const [shareModalOpen, setShareModalOpen] = useState(false);
  const [shareUrl, setShareUrl] = useState('');
  const [showWelcomePopup, setShowWelcomePopup] = useState(false);
  const [likedContent, setLikedContent] = useState([]);
  const FALLBACK_VIDEO_URL = 'https://res.cloudinary.com/di97mcvbu/video/upload/v1708430555/contents/q1xhinruadpovy0jxf6f.mp4';
  const sliderContainerRef = useRef(null);

  useEffect(() => {
    if (isMobile) return; // Skip on mobile since banner is not fixed

    const sliderContainer = sliderContainerRef.current;
    if (!sliderContainer) return;

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const rect = entry.boundingClientRect;
          const fadeStart = 435; // Start fading 300px from top
          const fadeEnd = 435; // Fully transparent 100px from top

          if (rect.top <= fadeStart && rect.top >= fadeEnd) {
            const opacity = 1 - (fadeStart - rect.top) / (fadeStart - fadeEnd);
            entry.target.style.opacity = Math.max(0, Math.min(1, opacity));
          } else if (rect.top < fadeEnd) {
            entry.target.style.opacity = 0;
          } else {
            entry.target.style.opacity = 1;
          }
        });
      },
      {
        root: null,
        threshold: Array.from({ length: 101 }, (_, i) => i / 100),
      }
    );

    const sliders = sliderContainer.querySelectorAll(
      '.video-category, .video-category-this, .video-category-1, .video-category-circle'
    );
    sliders.forEach((slider) => observer.observe(slider));

    return () => {
      sliders.forEach((slider) => observer.unobserve(slider));
    };
  }, [isMobile, homePageData]);

  useEffect(() => {
    const cookiesAccepted = localStorage.getItem('cookiesAccepted');
    if (!cookiesAccepted) {
      setShowCookiesPopup(true);
    }
  }, []);

  useEffect(() => {
    const handleResize = () => {
      const mobile = window.innerWidth <= 768;
      setIsMobile(mobile);
      console.log('isMobile:', mobile);
    };
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  useEffect(() => {
    let timeoutId;
    if (!user) {
      timeoutId = setTimeout(() => {
        setShowWelcomePopup(true);
      }, 15000);
    }
    return () => clearTimeout(timeoutId);
  }, [user]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get('https://playmoodserver-stg-0fb54b955e6b.herokuapp.com/api/content/');
        setHomePageData(response.data);
        console.log('homePageData:', response.data);
      } catch (error) {
        console.error('Error fetching data:', error);
        toast.error('Failed to load content');
      }
    };

    fetchData();
  }, []);

  useEffect(() => {
    if (user && user.like && homePageData.length > 0) {
      const liked = homePageData.filter((content) => user.like.includes(content._id));
      setLikedContent(liked);
      console.log('likedContent:', liked);
      console.log('user.like:', user.like);
    } else {
      setLikedContent([]);
      console.log('No liked content: user.like or homePageData empty');
    }
  }, [user, homePageData]);

  useEffect(() => {
    if (homePageData.length > 0) {
      const intervalId = setInterval(() => {
        setContentIndex((prevIndex) => (prevIndex + 1) % homePageData.length);
      }, 30000);
      return () => clearInterval(intervalId);
    }
  }, [homePageData.length]);

  const handleAcceptCookies = () => {
    localStorage.setItem('cookiesAccepted', 'true');
    setShowCookiesPopup(false);
  };

  const handleOptOutCookies = () => {
    localStorage.setItem('cookiesAccepted', 'false');
    setShowCookiesPopup(false);
  };

  const handleLike = async () => {
    setIsLiked(!isLiked);
    try {
      if (user && user._id) {
        const currentContent = homePageData[contentIndex];
        if (currentContent) {
          const contentId = currentContent._id;
          const isLiked = user.like && user.like.includes(contentId);
          if (isLiked) {
            await dispatch(unlikeContent({ userId: user._id, contentId }));
          } else {
            await dispatch(likeContent({ userId: user._id, contentId }));
          }
        }
      } else {
        setShowWelcomePopup(true);
      }
    } catch (error) {
      console.error('Error liking/unliking content:', error);
      toast.error('Error updating like status');
    }
  };

  const handleWatchlist = async () => {
    try {
      if (user && user._id) {
        const currentContent = homePageData[contentIndex];
        if (currentContent) {
          const contentId = currentContent._id;
          const isWatchlisted = user.watchlist && user.watchlist.includes(contentId);
          if (isWatchlisted) {
            await dispatch(removeFromWatchlist({ userId: user._id, contentId }));
          } else {
            await dispatch(addToWatchlist({ userId: user._id, contentId }));
          }
        }
      } else {
        setShowWelcomePopup(true);
      }
    } catch (error) {
      console.error('Error adding/removing from watchlist:', error);
      toast.error('Error updating watchlist');
    }
  };

  const handleWatchNow = () => {
    const currentContent = homePageData[contentIndex];
    if (currentContent) {
      navigate(`/movie/${currentContent._id}`, {
        state: {
          movie: currentContent.video,
          title: currentContent.title || '',
          desc: currentContent.description || '',
          credits: currentContent.credit || '',
        },
      });
    }
  };

  const truncateTitle = (title, maxLength) => {
    return title && title.length > maxLength ? title.slice(0, maxLength) + '...' : title || '';
  };

  const CookiesPopup = ({ onAccept, onOptOut }) => (
    <div className="fixed bottom-0 left-0 right-0 flex justify-center items-end bg-gray-800 bg-opacity-50 z-50 p-4">
      <div className="bg-white p-5 rounded-t-lg shadow-lg text-center w-full">
        <h2 className="text-x font-bold mb-1">Cookies Policy</h2>
        <p className="mb-1 text-sm">We use cookies to enhance your experience. Please accept our cookies policy.</p>
        <div className="flex justify-center gap-4">
          <button
            className="bg-[#541011] text-xs text-white py-1 px-2 rounded hover:bg-[#6b1516] transition-colors"
            onClick={onAccept}
          >
            Accept
          </button>
          <button
            className="bg-gray-500 text-xs text-white py-1 px-2 rounded hover:bg-gray-600 transition-colors"
            onClick={onOptOut}
          >
            Opt Out
          </button>
        </div>
      </div>
    </div>
  );

  return (
    <Homecontent>
      {showCookiesPopup && <CookiesPopup onAccept={handleAcceptCookies} onOptOut={handleOptOutCookies} />}
      {isMobile ? (
        <Hamburger>
          <MobileBurger channels={channels} set_channels={set_channels} />
        </Hamburger>
      ) : (
        <DesktopHeader channels={channels} set_channels={set_channels} />
      )}
      {channels && (
        <div className="h-[500px] w-[1000px] absolute top-[100px] left-[250px] z-[1001] overflow-hidden flex justify-center items-center rounded-2xl md:w-4/5 md:h-4/5 md:left-20 md:top-[100px]">
          <button
            className="absolute w-5 h-5 top-2.5 right-2.5 bg-red-500 border-none rounded-full text-white text-lg cursor-pointer"
            onClick={() => set_channels(false)}
          >
            <AiOutlineClose />
          </button>
          <img
            src={channelsimg}
            alt=""
            className="w-full h-full absolute object-cover top-0 left-0 z-[-1]"
          />
          <div className="h-fit w-4/5 flex justify-center items-center flex-col gap-2.5">
            <h2 className="text-white text-2xl md:text-xl" style={{ textShadow: '2px 2px red' }}>
              This feature is Coming Soon
            </h2>
            <p className="text-white text-xl md:text-sm" style={{ textShadow: '1px 1px red' }}>
              Our content creators are doing great, and we are building a special platform for them!
            </p>
            <form className="flex justify-center items-center gap-5 w-1/2 mx-auto md:flex-col">
              <input
                name="name"
                placeholder="Name"
                type="text"
                className="px-5 py-2.5 rounded-full"
              />
              <input
                name="email"
                placeholder="Email"
                type="email"
                className="px-5 py-2.5 rounded-full"
              />
              <button className="bg-red-500 px-5 py-2.5 text-white border-none rounded-full cursor-pointer">
                Subscribe
              </button>
            </form>
          </div>
        </div>
      )}
      <Content>
        {isMobile ? (
          <LikedContentCardWrapper>
            {homePageData.length === 0 ? (
              <p style={{ color: 'white', textAlign: 'center' }}>Loading content...</p>
            ) : (
              <LikedContentCard
                likedContent={likedContent}
                homePageData={homePageData}
                contentIndex={contentIndex}
                isVisibleOnMobile={isMobile}
              />
            )}
          </LikedContentCardWrapper>
        ) : (
          <Banner>
            <BannerVideoContainer>
              {homePageData.length > 0 && homePageData[contentIndex]?.video ? (
                <video
                  key={`banner-${contentIndex}`}
                  className="banner-video"
                  muted
                  loop
                  autoPlay
                  playsInline
                  onError={(e) => {
                    console.error('Banner video error:', e);
                    e.target.src = FALLBACK_VIDEO_URL;
                  }}
                >
                  <source src={homePageData[contentIndex].video} type="video/mp4" />
                </video>
              ) : (
                <video
                  key="banner-fallback"
                  className="banner-video"
                  muted
                  loop
                  autoPlay
                  playsInline
                  onError={(e) => console.error('Fallback banner video error:', e)}
                >
                  <source src={FALLBACK_VIDEO_URL} type="video/mp4" />
                </video>
              )}
            </BannerVideoContainer>
            <BannerContent>
              <div className="title-truncate">
                <h1>{truncateTitle(homePageData[contentIndex]?.title, 20)}</h1>
              </div>
              <div className="description-truncate">
                <p>{homePageData[contentIndex]?.description || ''}</p>
                {homePageData[contentIndex]?.description?.length > 150 && (
                  <button className="view-more-btn">View more</button>
                )}
              </div>
              <div className="flex gap-5">
                <button
                  className="flex items-center justify-center p-1 bg-transparent border border-white rounded text-white cursor-pointer"
                  onClick={handleWatchNow}
                >
                  WATCH N<span className="relative top-[1px] ml-1">
                    <img src={playbutton} className="h-3 w-3" alt="play" />
                  </span>W
                </button>
                <button
                  className="flex items-center justify-center p-1 bg-transparent border border-white rounded text-white cursor-pointer"
                  onClick={handleWatchlist}
                >
                  ADD T<span className="relative top-[1px] ml-1">
                    <img src={plusbutton} className="h-3 w-3" alt="add" />
                  </span> WATCHLIST
                </button>
              </div>
              <div className="flex gap-5 mt-2">
                <button
                  className="flex items-center justify-center p-1 bg-transparent border border-white rounded text-white cursor-pointer"
                  onClick={handleLike}
                >
                  <span className="relative top-[1px] -left-1">
                    <img
                      src={isLiked ? redheart : whiteheart}
                      alt="heart"
                      className="h-[15px] w-[15px]"
                    />
                  </span>
                  LIKE
                </button>
                <button
                  className="flex items-center justify-center p-1 bg-transparent border border-white rounded text-white cursor-pointer"
                  onClick={() => setShareModalOpen(!shareModalOpen)}
                >
                  <span className="relative top-[2px] -left-1">
                    <img src={sendmessage} className="h-[15px] w-[15px]" alt="share" />
                  </span>
                  SHARE
                </button>
                <button
                  className="flex items-center justify-center p-1 bg-transparent border border-white rounded text-white cursor-pointer"
                  onClick={() => set_channels(!channels)}
                >
                  ADD TO FAVOURITE +
                </button>
              </div>
              {shareModalOpen && (
                <ShareModal
                  open={shareModalOpen}
                  onClose={() => setShareModalOpen(false)}
                  shareUrl={shareUrl}
                />
              )}
            </BannerContent>
          </Banner>
        )}
        <SliderContainer ref={sliderContainerRef}>
          <VideoCategory className="video-category" id="top10">
            <Videocategorytitle>Top 10</Videocategorytitle>
            <Slidertop10 />
          </VideoCategory>
          {user && (
            <VideoCategorythis className="video-category-this" id="continue">
              <Videocategorytitle>Continue Watching</Videocategorytitle>
              <SliderNew />
            </VideoCategorythis>
          )}
          <VideoCategorythis className="video-category-this" id="newonplay">
            <Videocategorytitle>New on Playmood</Videocategorytitle>
            <SliderNew />
          </VideoCategorythis>
          <VideoCategoryCircle className="video-category-circle" id="channel">
            <Videocategorytitle>Channels</Videocategorytitle>
            <SliderChannel />
          </VideoCategoryCircle>
          <VideoCategoryCircle className="video-category-circle" id="diaries">
            <Videocategorytitle>Diaries</Videocategorytitle>
            <SliderDiaries />
          </VideoCategoryCircle>
          <VideoCategoryCircle className="video-category-circle" id="spaces">
            <Videocategorytitle>Spaces</Videocategorytitle>
            <SliderSpace />
          </VideoCategoryCircle>
          <VideoCategory1 className="video-category-1" id="recommended">
            <Videocategorytitle>Recommended for you</Videocategorytitle>
            <SlideRecommended />
          </VideoCategory1>
          <VideoCategory1 className="video-category-1" id="interviews">
            <Videocategorytitle>Interviews</Videocategorytitle>
            <SliderInterview />
          </VideoCategory1>
          <VideoCategory1 className="video-category-1" id="fashion">
            <Videocategorytitle>Fashion Shows</Videocategorytitle>
            <SliderFashion />
          </VideoCategory1>
          <VideoCategory1 className="video-category-1" id="social">
            <Videocategorytitle>Social</Videocategorytitle>
            <SliderSocial />
          </VideoCategory1>
          <VideoCategory1 className="video-category-1" id="documentaries">
            <Videocategorytitle>Documentaries and Reports</Videocategorytitle>
            <SliderDocumentaries />
          </VideoCategory1>
          <VideoCategory1 className="video-category-1" id="documentaries">
            <Videocategorytitle>Behind the Cameras</Videocategorytitle>
            <SliderCamera />
          </VideoCategory1>
          <VideoCategory1 className="video-category-1" id="documentaries">
            <Videocategorytitle>Soon in Playmood</Videocategorytitle>
            <SliderSoon />
          </VideoCategory1>
          <VideoCategory1 className="video-category-1" id="teens">
            <Videocategorytitle>Teens</Videocategorytitle>
            <SliderTeens />
          </VideoCategory1>
          <VideoCategory1 className="video-category-1" id="social">
            <Videocategorytitle>Best in Fashion</Videocategorytitle>
            <SliderFashion />
          </VideoCategory1>
          <VideoCategory1 className="video-category-1" id="infashion">
            <Videocategorytitle>Only in playmood</Videocategorytitle>
            <SliderOnly />
          </VideoCategory1>
        </SliderContainer>
        <WelcomePopup
          showPopup={showWelcomePopup}
          onClose={() => setShowWelcomePopup(false)}
          onLogin={() => setShowWelcomePopup(false)}
          onRegister={() => setShowWelcomePopup(false)}
        />
        <Footer>
          <div>
            <img src={logo} alt="PlaymoodTV Logo" />
          </div>
          <div className="instagrams">
            <div className="instagram-official">
              <a href="https://instagram.com/playmoodtv?igshid=MzRlODBiNWFlZA==">
                <img src={instagram} alt="Instagram" />
              </a>
              <p className="instagram-links">
                <a href="https://instagram.com/playmoodtv?igshid=MzRlODBiNWFlZA==" target="_blank" rel="noopener noreferrer">
                  Official
                </a>
              </p>
            </div>
            <div className="instagram-official">
              <a href="https://www.instagram.com/playmoodlat/">
                <img src={instagram} alt="Instagram" />
              </a>
              <p className="instagram-links">
                <a href="https://www.instagram.com/playmoodlat/" target="_blank" rel="noopener noreferrer">
                  Latam
                </a>
              </p>
            </div>
            <div className="instagram-official">
              <a href="https://www.instagram.com/playmoodmx/">
                <img src={instagram} alt="Instagram" />
              </a>
              <p className="instagram-links">
                <a href="https://www.instagram.com/playmoodmx/" target="_blank" rel="noopener noreferrer">
                  MX
                </a>
              </p>
            </div>
          </div>
          <div></div>
          <div className="contact-footer">
            <h2>Contact us:</h2>
            <h3>Creators@playmoodtv.com</h3>
            <div>
              <p onClick={() => navigate('/privacy-policy')}>Privacy Policy</p>
              <p onClick={() => navigate('/cookies')}>Cookies Policy</p>
            </div>
            <div>
              <p>All rights reserved to PlaymoodTV 2023</p>
            </div>
          </div>
        </Footer>
      </Content>
    </Homecontent>
  );
}

const Homecontent = styled.div`
  width: 100vw;
  min-height: 100vh; /* Allow content to extend beyond viewport */
  overflow-x: hidden;
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: #000;
`;

const Hamburger = styled.div`
  display: none;
  @media (max-width: 768px) {
    display: block;
    position: relative;
    font-size: 30px;
    top: 60px;
    left: 8px;
    cursor: pointer;
    color: white;
    &:hover {
      color: #541011;
    }
    z-index: 1000;
    svg {
      font-size: 40px;
    }
  }
`;

const Banner = styled.div`
  width: 100vw;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 100;
  background-color: transparent;
  overflow: hidden;

  @media screen and (max-width: 768px) {
    position: relative;
    height: auto;
    width: 100%;
  }
`;

const BannerVideoContainer = styled.div`
  width: 100vw;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
  overflow: hidden;
  z-index: 101;

  .banner-video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    mask-image: linear-gradient(to left, rgba(0, 0, 0, 0) 20%, rgba(0, 0, 0, 1) 60%);
    -webkit-mask-image: linear-gradient(to left, rgba(0, 0, 0, 0) 20%, rgba(0, 0, 0, 1) 60%);
  }

  @media screen and (max-width: 768px) {
    position: relative;
    width: 100%;
    height: 300px;
    .banner-video {
      mask-image: linear-gradient(to left, rgba(0, 0, 0, 0) 10%, rgba(0, 0, 0, 1) 50%);
      -webkit-mask-image: linear-gradient(to left, rgba(0, 0, 0, 0) 10%, rgba(0, 0, 0, 1) 50%);
    }
  }
`;

const BannerContent = styled.div`
  position: absolute;
  top: 35%;
  right: 15%;
  transform: translateY(-50%);
  width: 400px;
  max-width: 90%;
  display: flex;
  flex-direction: column;
  gap: 15px;
  padding: 20px;
  background: rgba(0, 0, 0, 0.7);
  border-radius: 8px;
  z-index: 300;
  color: white;

  h1 {
    font-size: 2.5rem;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.7);
  }

  p {
    font-size: 1rem;
    line-height: 1.5;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.7);
  }

  .view-more-btn {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    text-decoration: underline;
    font-size: 0.9rem;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.7);
  }

  @media screen and (max-width: 1000px) {
    h1 {
      font-size: 1.8rem;
    }
    p {
      font-size: 0.8rem;
    }
  }

  @media screen and (max-width: 768px) {
    position: relative;
    top: auto;
    left: auto;
    transform: none;
    width: 100%;
    max-width: 100%;
    padding: 15px;
    background: rgba(0, 0, 0, 0.8);
    border-radius: 0;
  }
`;

const Content = styled.div`
  height: fit-content;
  width: 100%;
  margin-top: calc(100vh - 200px); /* Show 200px of SliderContainer at bottom of banner */
  position: relative;
  z-index: 200;

  @media screen and (max-width: 768px) {
    margin-top: 0; /* Stack below banner on mobile */
  }
`;

const LikedContentCardWrapper = styled.div`
  width: 90%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  color: white;
  min-height: 400px;

  @media screen and (max-width: 768px) {
    padding: 10px;
    margin-top: 20px;
  }
`;

const SliderContainer = styled.div`
  width: 100%;
  position: relative;
  z-index: 200;
`;

const VideoCategory = styled.div`
  height: 390px;
  width: 92%;
  margin: 30px 20px 100px 20px;
  display: flex;
  gap: 0px;
  flex-direction: column;
  transition: opacity 0.5s ease;

  @media screen and (max-width: 495px) {
    margin-top: 70px;
  }
`;

const VideoCategorythis = styled.div`
  height: 395px;
  width: 92%;
  margin: 0px 20px 100px 20px;
  display: flex;
  gap: 0px;
  flex-direction: column;
  transition: opacity 0.5s ease;

  @media screen and (max-width: 395px) {
    margin-top: 80px;
  }
`;

const VideoCategory1 = styled.div`
  height: 350px;
  width: 92%;
  margin: 10px 20px 100px 20px;
  display: flex;
  gap: 0px;
  flex-direction: column;
  transition: opacity 0.5s ease;
`;

const VideoCategoryCircle = styled.div`
  height: 230px;
  width: 92%;
  margin: 50px 20px 150px;
  display: flex;
  gap: 0px;
  flex-direction: column;
  transition: opacity 0.5s ease;

  @media screen and (max-width: 768px) {
    margin: 0px 20px 80px 20px;
  }
`;

const Videocategorytitle = styled.h3`
  font-size: 1.5rem;
  color: white;
  padding-bottom: 30px;
  font-weight: 600;

  @media only screen and (min-width: 300px) {
    font-size: 1.5rem;
    padding: 5px 5px 20px 25px;
  }

  @media only screen and (min-width: 800px) {
    font-size: 1.8rem;
    padding: 5px 5px 20px 60px;
  }
`;

const Footer = styled.div`
  height: fit-content;
  width: 100%;
  background-color: black;
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 20px;
  padding: 20px 60px 20px 60px;
  position: relative;
  z-index: 200;

  .contact-footer {
    display: flex;
    flex-direction: column;
    gap: 10px;

    div {
      display: flex;
      flex-direction: column;
      gap: 2px;
    }
  }

  .instagrams {
    display: flex;
    gap: 5px;

    .instagram-official {
      display: flex;
      height: fit-content;
      align-items: center;
      color: white;

      .instagram-links {
        a {
          text-decoration: none;
          color: white;
        }
      }

      img {
        height: 20px;
        width: 20px;
      }
    }
  }

  div {
    height: fit-content;
    display: flex;
    gap: 10px;
    color: white;

    p {
      font-size: 0.7rem;
      cursor: pointer;
    }

    img {
      height: 80px;
      width: 100%;
      cursor: pointer;
    }
  }

  @media screen and (max-width: 600px) {
    flex-direction: column;
    padding-bottom: 10px;
    text-align: center;
  }
`;

export {
  Homecontent,
  Content,
  Banner,
  VideoCategory,
  Videocategorytitle,
  Footer,
  LikedContentCardWrapper,
  SliderContainer,
};